// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/darklam/gofig/interfaces"
	"sync"
)

// Ensure, that ValuerMock does implement interfaces.Valuer.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Valuer = &ValuerMock{}

// ValuerMock is a mock implementation of interfaces.Valuer.
//
//	func TestSomethingThatUsesValuer(t *testing.T) {
//
//		// make and configure a mocked interfaces.Valuer
//		mockedValuer := &ValuerMock{
//			ValueFunc: func(mountPath string, secretPath string) (map[string]interface{}, error) {
//				panic("mock out the Value method")
//			},
//		}
//
//		// use mockedValuer in code that requires interfaces.Valuer
//		// and then make assertions.
//
//	}
type ValuerMock struct {
	// ValueFunc mocks the Value method.
	ValueFunc func(mountPath string, secretPath string) (map[string]interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Value holds details about calls to the Value method.
		Value []struct {
			// MountPath is the mountPath argument value.
			MountPath string
			// SecretPath is the secretPath argument value.
			SecretPath string
		}
	}
	lockValue sync.RWMutex
}

// Value calls ValueFunc.
func (mock *ValuerMock) Value(mountPath string, secretPath string) (map[string]interface{}, error) {
	if mock.ValueFunc == nil {
		panic("ValuerMock.ValueFunc: method is nil but Valuer.Value was just called")
	}
	callInfo := struct {
		MountPath  string
		SecretPath string
	}{
		MountPath:  mountPath,
		SecretPath: secretPath,
	}
	mock.lockValue.Lock()
	mock.calls.Value = append(mock.calls.Value, callInfo)
	mock.lockValue.Unlock()
	return mock.ValueFunc(mountPath, secretPath)
}

// ValueCalls gets all the calls that were made to Value.
// Check the length with:
//
//	len(mockedValuer.ValueCalls())
func (mock *ValuerMock) ValueCalls() []struct {
	MountPath  string
	SecretPath string
} {
	var calls []struct {
		MountPath  string
		SecretPath string
	}
	mock.lockValue.RLock()
	calls = mock.calls.Value
	mock.lockValue.RUnlock()
	return calls
}
