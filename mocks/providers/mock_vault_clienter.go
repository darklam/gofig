// Code generated by mockery v2.33.0. DO NOT EDIT.

package providers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockVaultClienter is an autogenerated mock type for the VaultClienter type
type MockVaultClienter struct {
	mock.Mock
}

type MockVaultClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVaultClienter) EXPECT() *MockVaultClienter_Expecter {
	return &MockVaultClienter_Expecter{mock: &_m.Mock}
}

// AppRoleLogin provides a mock function with given fields: ctx, roleId, secretId
func (_m *MockVaultClienter) AppRoleLogin(ctx context.Context, roleId string, secretId string) error {
	ret := _m.Called(ctx, roleId, secretId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roleId, secretId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVaultClienter_AppRoleLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppRoleLogin'
type MockVaultClienter_AppRoleLogin_Call struct {
	*mock.Call
}

// AppRoleLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - roleId string
//   - secretId string
func (_e *MockVaultClienter_Expecter) AppRoleLogin(ctx interface{}, roleId interface{}, secretId interface{}) *MockVaultClienter_AppRoleLogin_Call {
	return &MockVaultClienter_AppRoleLogin_Call{Call: _e.mock.On("AppRoleLogin", ctx, roleId, secretId)}
}

func (_c *MockVaultClienter_AppRoleLogin_Call) Run(run func(ctx context.Context, roleId string, secretId string)) *MockVaultClienter_AppRoleLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVaultClienter_AppRoleLogin_Call) Return(_a0 error) *MockVaultClienter_AppRoleLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVaultClienter_AppRoleLogin_Call) RunAndReturn(run func(context.Context, string, string) error) *MockVaultClienter_AppRoleLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetValues provides a mock function with given fields: ctx, path, mountPath
func (_m *MockVaultClienter) GetValues(ctx context.Context, path string, mountPath string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, path, mountPath)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]interface{}, error)); ok {
		return rf(ctx, path, mountPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]interface{}); ok {
		r0 = rf(ctx, path, mountPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, path, mountPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVaultClienter_GetValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValues'
type MockVaultClienter_GetValues_Call struct {
	*mock.Call
}

// GetValues is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - mountPath string
func (_e *MockVaultClienter_Expecter) GetValues(ctx interface{}, path interface{}, mountPath interface{}) *MockVaultClienter_GetValues_Call {
	return &MockVaultClienter_GetValues_Call{Call: _e.mock.On("GetValues", ctx, path, mountPath)}
}

func (_c *MockVaultClienter_GetValues_Call) Run(run func(ctx context.Context, path string, mountPath string)) *MockVaultClienter_GetValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVaultClienter_GetValues_Call) Return(_a0 map[string]interface{}, _a1 error) *MockVaultClienter_GetValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVaultClienter_GetValues_Call) RunAndReturn(run func(context.Context, string, string) (map[string]interface{}, error)) *MockVaultClienter_GetValues_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: url, requestTimeout
func (_m *MockVaultClienter) Initialize(url string, requestTimeout time.Duration) error {
	ret := _m.Called(url, requestTimeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(url, requestTimeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVaultClienter_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockVaultClienter_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - url string
//   - requestTimeout time.Duration
func (_e *MockVaultClienter_Expecter) Initialize(url interface{}, requestTimeout interface{}) *MockVaultClienter_Initialize_Call {
	return &MockVaultClienter_Initialize_Call{Call: _e.mock.On("Initialize", url, requestTimeout)}
}

func (_c *MockVaultClienter_Initialize_Call) Run(run func(url string, requestTimeout time.Duration)) *MockVaultClienter_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockVaultClienter_Initialize_Call) Return(_a0 error) *MockVaultClienter_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVaultClienter_Initialize_Call) RunAndReturn(run func(string, time.Duration) error) *MockVaultClienter_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// KubernetesLogin provides a mock function with given fields: ctx, jwt, role
func (_m *MockVaultClienter) KubernetesLogin(ctx context.Context, jwt string, role string) error {
	ret := _m.Called(ctx, jwt, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, jwt, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVaultClienter_KubernetesLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubernetesLogin'
type MockVaultClienter_KubernetesLogin_Call struct {
	*mock.Call
}

// KubernetesLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - jwt string
//   - role string
func (_e *MockVaultClienter_Expecter) KubernetesLogin(ctx interface{}, jwt interface{}, role interface{}) *MockVaultClienter_KubernetesLogin_Call {
	return &MockVaultClienter_KubernetesLogin_Call{Call: _e.mock.On("KubernetesLogin", ctx, jwt, role)}
}

func (_c *MockVaultClienter_KubernetesLogin_Call) Run(run func(ctx context.Context, jwt string, role string)) *MockVaultClienter_KubernetesLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVaultClienter_KubernetesLogin_Call) Return(_a0 error) *MockVaultClienter_KubernetesLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVaultClienter_KubernetesLogin_Call) RunAndReturn(run func(context.Context, string, string) error) *MockVaultClienter_KubernetesLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVaultClienter creates a new instance of MockVaultClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVaultClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVaultClienter {
	mock := &MockVaultClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
