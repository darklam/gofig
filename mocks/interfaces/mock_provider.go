// Code generated by mockery v2.33.0. DO NOT EDIT.

package interfaces

import mock "github.com/stretchr/testify/mock"

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// GetValue provides a mock function with given fields: fieldPath
func (_m *MockProvider) GetValue(fieldPath []string) (string, error) {
	ret := _m.Called(fieldPath)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (string, error)); ok {
		return rf(fieldPath)
	}
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(fieldPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(fieldPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockProvider_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - fieldPath []string
func (_e *MockProvider_Expecter) GetValue(fieldPath interface{}) *MockProvider_GetValue_Call {
	return &MockProvider_GetValue_Call{Call: _e.mock.On("GetValue", fieldPath)}
}

func (_c *MockProvider_GetValue_Call) Run(run func(fieldPath []string)) *MockProvider_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockProvider_GetValue_Call) Return(_a0 string, _a1 error) *MockProvider_GetValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_GetValue_Call) RunAndReturn(run func([]string) (string, error)) *MockProvider_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
