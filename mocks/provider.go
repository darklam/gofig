// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/darklam/gofig/interfaces"
	"reflect"
	"sync"
)

// Ensure, that ProviderMock does implement interfaces.Provider.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Provider = &ProviderMock{}

// ProviderMock is a mock implementation of interfaces.Provider.
//
//	func TestSomethingThatUsesProvider(t *testing.T) {
//
//		// make and configure a mocked interfaces.Provider
//		mockedProvider := &ProviderMock{
//			GetValueFunc: func(field reflect.StructField, parentField *reflect.StructField) (string, error) {
//				panic("mock out the GetValue method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedProvider in code that requires interfaces.Provider
//		// and then make assertions.
//
//	}
type ProviderMock struct {
	// GetValueFunc mocks the GetValue method.
	GetValueFunc func(field reflect.StructField, parentField *reflect.StructField) (string, error)

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetValue holds details about calls to the GetValue method.
		GetValue []struct {
			// Field is the field argument value.
			Field reflect.StructField
			// ParentField is the parentField argument value.
			ParentField *reflect.StructField
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockGetValue sync.RWMutex
	lockName     sync.RWMutex
}

// GetValue calls GetValueFunc.
func (mock *ProviderMock) GetValue(field reflect.StructField, parentField *reflect.StructField) (string, error) {
	if mock.GetValueFunc == nil {
		panic("ProviderMock.GetValueFunc: method is nil but Provider.GetValue was just called")
	}
	callInfo := struct {
		Field       reflect.StructField
		ParentField *reflect.StructField
	}{
		Field:       field,
		ParentField: parentField,
	}
	mock.lockGetValue.Lock()
	mock.calls.GetValue = append(mock.calls.GetValue, callInfo)
	mock.lockGetValue.Unlock()
	return mock.GetValueFunc(field, parentField)
}

// GetValueCalls gets all the calls that were made to GetValue.
// Check the length with:
//
//	len(mockedProvider.GetValueCalls())
func (mock *ProviderMock) GetValueCalls() []struct {
	Field       reflect.StructField
	ParentField *reflect.StructField
} {
	var calls []struct {
		Field       reflect.StructField
		ParentField *reflect.StructField
	}
	mock.lockGetValue.RLock()
	calls = mock.calls.GetValue
	mock.lockGetValue.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ProviderMock) Name() string {
	if mock.NameFunc == nil {
		panic("ProviderMock.NameFunc: method is nil but Provider.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedProvider.NameCalls())
func (mock *ProviderMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}
