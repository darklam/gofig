// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/darklam/gofig/interfaces"
)

type FakeProvider struct {
	GetValueStub        func([]string) (string, error)
	getValueMutex       sync.RWMutex
	getValueArgsForCall []struct {
		arg1 []string
	}
	getValueReturns struct {
		result1 string
		result2 error
	}
	getValueReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) GetValue(arg1 []string) (string, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getValueMutex.Lock()
	ret, specificReturn := fake.getValueReturnsOnCall[len(fake.getValueArgsForCall)]
	fake.getValueArgsForCall = append(fake.getValueArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.GetValueStub
	fakeReturns := fake.getValueReturns
	fake.recordInvocation("GetValue", []interface{}{arg1Copy})
	fake.getValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProvider) GetValueCallCount() int {
	fake.getValueMutex.RLock()
	defer fake.getValueMutex.RUnlock()
	return len(fake.getValueArgsForCall)
}

func (fake *FakeProvider) GetValueCalls(stub func([]string) (string, error)) {
	fake.getValueMutex.Lock()
	defer fake.getValueMutex.Unlock()
	fake.GetValueStub = stub
}

func (fake *FakeProvider) GetValueArgsForCall(i int) []string {
	fake.getValueMutex.RLock()
	defer fake.getValueMutex.RUnlock()
	argsForCall := fake.getValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProvider) GetValueReturns(result1 string, result2 error) {
	fake.getValueMutex.Lock()
	defer fake.getValueMutex.Unlock()
	fake.GetValueStub = nil
	fake.getValueReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) GetValueReturnsOnCall(i int, result1 string, result2 error) {
	fake.getValueMutex.Lock()
	defer fake.getValueMutex.Unlock()
	fake.GetValueStub = nil
	if fake.getValueReturnsOnCall == nil {
		fake.getValueReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getValueReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getValueMutex.RLock()
	defer fake.getValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.Provider = new(FakeProvider)
